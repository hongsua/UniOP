#!/usr/bin/env python

"""
DistanceModel - Predicting operons using intergenic distance only
Created on Tuesday August 01 2023
@author: Hong Su
"""

from DistanceModel import *

def get_parser():
	'''
	get command line arguments
	'''
	parser = argparse.ArgumentParser(description='Operon prediction using intergenic distance and conservation of adjacent gene pairs.',
									 epilog="""An example:\npython DistanceModel.py -i demo/ecoli.gff -o demo/ecoli.dist.pred\n""")
	parser.add_argument('-db_msh','--ref_db_msh',required=False,help='required by conservation model: a compressed .msh file contains the entire reference genome.')
	parser.add_argument('-db_pred','--distPred_db',required=False,help='required by conservation model: operon prediction database of the selected reference set. This is prepared by our distance model.')
	parser.add_argument('-db_dir','--ref_db',required=True,help='required by refs_selection.py.')
	parser.add_argument('-db_lst','--ref_db_lst',required=True,help='required by refs_selection.py.')
	parser.add_argument('-prod','--prodigal_dir',required=False,help='required by refs_selection.py.')
	return parser.parse_args()

def select_refs(ref_db_msh, faa_file, sele_n=1, path=None):
	'''
	Select sub reference genomes for each query based on evolutionary distance. 
	The entire reference genome is compressed into a single reference.msh file.
	'''
	## compute the evolutionary distance between query and all reference genomes using mash.
	if path is None:
		path=os.getcwd()

	dist_file = f"{path}/mash_dist.txt"
	os.system(f"mash dist {ref_db_msh} {faa_file} -p 8 | cut -f 1,3,4,5 > {dist_file}")
	## select <= n genomes at each distance.
	df_mash = pd.read_csv(dist_file, sep='\t', header=None, 
						  names=['refid','dist','pval','match'], 
						  dtype={'refid':'str','dist':'float'})
	sele_dict = {'index':[],'dist':[]}
	for i in df_mash.index:
		dst = df_mash.at[i,'dist']
		if dst == 1.0: ## skip the genomes with evolutionary distance == 1.0
			continue
		n_dst = sele_dict['dist'].count(dst)
		if n_dst <= sele_n: ## the num of selected refs at a given distance equals or less than 2.
			sele_dict['dist'].append(dst)
			sele_dict['index'].append(i)
	sele_df = df_mash[df_mash.index.isin(sele_dict['index'])]
	subrefs = f"{path}/valid_refs.lst"
	with open(subrefs, 'w') as fout:
		fout.write('\n'.join(sele_df.refid.values))


def main():
	args = get_parser()
	start = datetime.now()
	
	db_dir = args.ref_db
	db_lst = args.ref_db_lst
	prod_dir = prodigal_dir
	ref_db_msh = args.ref_db_msh # a compressed .msh file contains the entire reference genome. It is generated by mash
	pred_db = args.distPred_db # optinal folder path for operon prediction of the selected reference set. This is prepared by our distance model.
	
	## check if all genomes have .faa files
	if db_lst is None:
		raise ValueError('Please specify the list file')
	with open(db_lst) as f:
		lines = f.readlines()
		lines = [l.strip() for l in lines]
	for g in lines:
		faa_file = f"{db_dir}/{g}.faa"
		if os.path.exists(faa_file) and os.path.getsize(faa_file) > 0:
			continue
		else:
			print(f"run prodigal...")
			## run Prodigal
			fna_file = f"{db_dir}/{g}.fna"
			if os.path.exists(fna_file) and os.path.getsize(fna_file):
				os.system(f"{prod_dir}/prodigal -i {inputfile} -f gff -o {gff_file} -a {faa_file}")
	
	#if not os.path.exists(ref_db_msh) or os.path.getsize(ref_db_msh) == 0:
		
	
	#print(f"Time for processing: {datetime.now() - start}")
	


if __name__ == '__main__':
	main()